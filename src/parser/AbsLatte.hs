

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data MIdent a = MIdent a Ident
  deriving (Eq, Ord, Show, Read)

instance Functor MIdent where
    fmap f x = case x of
        MIdent a ident -> MIdent (f a) ident
data Program a = Program a [TopDef a]
  deriving (Eq, Ord, Show, Read)

instance Functor Program where
    fmap f x = case x of
        Program a topdefs -> Program (f a) (map (fmap f) topdefs)
data TopDef a
    = FnDef a (Type a) (MIdent a) [Arg a] (Block a)
    | ClDef a (MIdent a) (ClassExt a) [ClMember a]
  deriving (Eq, Ord, Show, Read)

instance Functor TopDef where
    fmap f x = case x of
        FnDef a type_ mident args block -> FnDef (f a) (fmap f type_) (fmap f mident) (map (fmap f) args) (fmap f block)
        ClDef a mident classext clmembers -> ClDef (f a) (fmap f mident) (fmap f classext) (map (fmap f) clmembers)
data ClassExt a = EmptyExt a | Ext a (MIdent a)
  deriving (Eq, Ord, Show, Read)

instance Functor ClassExt where
    fmap f x = case x of
        EmptyExt a -> EmptyExt (f a)
        Ext a mident -> Ext (f a) (fmap f mident)
data ClMember a
    = Field a (Type a) (MIdent a)
    | Method a (Type a) (MIdent a) [Arg a] (Block a)
  deriving (Eq, Ord, Show, Read)

instance Functor ClMember where
    fmap f x = case x of
        Field a type_ mident -> Field (f a) (fmap f type_) (fmap f mident)
        Method a type_ mident args block -> Method (f a) (fmap f type_) (fmap f mident) (map (fmap f) args) (fmap f block)
data Arg a = Arg a (Type a) (MIdent a)
  deriving (Eq, Ord, Show, Read)

instance Functor Arg where
    fmap f x = case x of
        Arg a type_ mident -> Arg (f a) (fmap f type_) (fmap f mident)
data Block a = Block a [Stmt a]
  deriving (Eq, Ord, Show, Read)

instance Functor Block where
    fmap f x = case x of
        Block a stmts -> Block (f a) (map (fmap f) stmts)
data Stmt a
    = Empty a
    | BStmt a (Block a)
    | Decl a (Type a) [Item a]
    | Ass a (Expr a) (Expr a)
    | Incr a (Expr a)
    | Decr a (Expr a)
    | Ret a (Expr a)
    | VRet a
    | Cond a (Expr a) (Stmt a)
    | CondElse a (Expr a) (Stmt a) (Stmt a)
    | While a (Expr a) (Stmt a)
    | SExp a (Expr a)
    | For a (Type a) (MIdent a) (Expr a) (Stmt a)
  deriving (Eq, Ord, Show, Read)

instance Functor Stmt where
    fmap f x = case x of
        Empty a -> Empty (f a)
        BStmt a block -> BStmt (f a) (fmap f block)
        Decl a type_ items -> Decl (f a) (fmap f type_) (map (fmap f) items)
        Ass a expr1 expr2 -> Ass (f a) (fmap f expr1) (fmap f expr2)
        Incr a expr -> Incr (f a) (fmap f expr)
        Decr a expr -> Decr (f a) (fmap f expr)
        Ret a expr -> Ret (f a) (fmap f expr)
        VRet a -> VRet (f a)
        Cond a expr stmt -> Cond (f a) (fmap f expr) (fmap f stmt)
        CondElse a expr stmt1 stmt2 -> CondElse (f a) (fmap f expr) (fmap f stmt1) (fmap f stmt2)
        While a expr stmt -> While (f a) (fmap f expr) (fmap f stmt)
        SExp a expr -> SExp (f a) (fmap f expr)
        For a type_ mident expr stmt -> For (f a) (fmap f type_) (fmap f mident) (fmap f expr) (fmap f stmt)
data Item a = NoInit a (MIdent a) | Init a (MIdent a) (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Item where
    fmap f x = case x of
        NoInit a mident -> NoInit (f a) (fmap f mident)
        Init a mident expr -> Init (f a) (fmap f mident) (fmap f expr)
data Type a
    = Var a | Void a | Array a (Type a) | Class a (MIdent a)
  deriving (Eq, Ord, Show, Read)

instance Functor Type where
    fmap f x = case x of
        Var a -> Var (f a)
        Void a -> Void (f a)
        Array a type_ -> Array (f a) (fmap f type_)
        Class a mident -> Class (f a) (fmap f mident)
data Expr a
    = ECast a (MIdent a) (Expr a)
    | EVar a (MIdent a)
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | ELitNull a
    | EApp a (Expr a) [Expr a]
    | EMember a (Expr a) (MIdent a)
    | ENew a (Type a)
    | ENewArray a (Type a) (Expr a)
    | EArr a (Expr a) (Expr a)
    | EString a String
    | Neg a (Expr a)
    | Not a (Expr a)
    | EMul a (Expr a) (MulOp a) (Expr a)
    | EAdd a (Expr a) (AddOp a) (Expr a)
    | ERel a (Expr a) (RelOp a) (Expr a)
    | EAnd a (Expr a) (Expr a)
    | EOr a (Expr a) (Expr a)
  deriving (Eq, Ord, Show, Read)

instance Functor Expr where
    fmap f x = case x of
        ECast a mident expr -> ECast (f a) (fmap f mident) (fmap f expr)
        EVar a mident -> EVar (f a) (fmap f mident)
        ELitInt a integer -> ELitInt (f a) integer
        ELitTrue a -> ELitTrue (f a)
        ELitFalse a -> ELitFalse (f a)
        ELitNull a -> ELitNull (f a)
        EApp a expr exprs -> EApp (f a) (fmap f expr) (map (fmap f) exprs)
        EMember a expr mident -> EMember (f a) (fmap f expr) (fmap f mident)
        ENew a type_ -> ENew (f a) (fmap f type_)
        ENewArray a type_ expr -> ENewArray (f a) (fmap f type_) (fmap f expr)
        EArr a expr1 expr2 -> EArr (f a) (fmap f expr1) (fmap f expr2)
        EString a string -> EString (f a) string
        Neg a expr -> Neg (f a) (fmap f expr)
        Not a expr -> Not (f a) (fmap f expr)
        EMul a expr1 mulop expr2 -> EMul (f a) (fmap f expr1) (fmap f mulop) (fmap f expr2)
        EAdd a expr1 addop expr2 -> EAdd (f a) (fmap f expr1) (fmap f addop) (fmap f expr2)
        ERel a expr1 relop expr2 -> ERel (f a) (fmap f expr1) (fmap f relop) (fmap f expr2)
        EAnd a expr1 expr2 -> EAnd (f a) (fmap f expr1) (fmap f expr2)
        EOr a expr1 expr2 -> EOr (f a) (fmap f expr1) (fmap f expr2)
data AddOp a = Plus a | Minus a
  deriving (Eq, Ord, Show, Read)

instance Functor AddOp where
    fmap f x = case x of
        Plus a -> Plus (f a)
        Minus a -> Minus (f a)
data MulOp a = Times a | Div a | Mod a
  deriving (Eq, Ord, Show, Read)

instance Functor MulOp where
    fmap f x = case x of
        Times a -> Times (f a)
        Div a -> Div (f a)
        Mod a -> Mod (f a)
data RelOp a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (Eq, Ord, Show, Read)

instance Functor RelOp where
    fmap f x = case x of
        LTH a -> LTH (f a)
        LE a -> LE (f a)
        GTH a -> GTH (f a)
        GE a -> GE (f a)
        EQU a -> EQU (f a)
        NE a -> NE (f a)
