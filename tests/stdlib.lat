// testing standard library for Latte

int main() {
    testFuns();
    testObject();
    testArray();
    testString();
    return 0;
}

void testFuns() {
    printString("testFuns");
    printInt(0);
    printBoolean(true);
    print("Implicit concat: " + 1 + " " + false);
    assert(boolToString(true) == "true");
    assert(intToString(5) == "5");
    //printString("Tell me a number: ");
    //printInt(readInt());
    //printString("Tell me a word: ");
    //printString(readString());
}

void assert(boolean b) {
    if(!b) {
        printString("ERROR: Assert failed!");
        error();
    }
}

void testObject() {
    printString("testObject");
    var o = new Object;
    print(o);
    printInt(o.getHashCode());
    printString("o == o -> " + (o.equals(o)));
}

void testArray() {
    printString("testArray");
    var n = new int[3];
    n[0] = 1;
    n[1] = 3;
    n[2] = n[0] + n[1];
    print("Array: " + n + ", length: " + n.length);
    var s = new string[3];
    s[0] = "papa";
    s[1] = " hapa";
    s[2] = s[0] + s[1];
    print("Array: " + s + ", length: " + s.length);
}

void testString() {
    printString("testString");
    printString("\n\t\\\"\'");
    printString("Unicode ąę ǻǺ");
    assert(("ąę").length() == 2);
    string s = "Alá ma kota"; //unicode support
    printString(s + " | length = " + s.length());
    assert(s.charAt(0) == 65);
    var sub = s.substring(0,5);
    var sub2 = s.substring(5, 6);
    print(sub + "    " + sub2);
    assert(s == sub + sub2);
    assert(s.startsWith(sub));
    assert(s.endsWith(sub2));
    var bytes = s.getBytes();
    printString("Bytes: "+bytes + " ("+bytes.length+")");
    printString("Index of 'k': " + s.indexOf("k", 0));
    printString("Hash: "+s.getHashCode());
}